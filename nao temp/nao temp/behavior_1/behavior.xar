<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                        <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="316" y="392">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Move To (1)" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="673" y="306">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.3" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="513" y="395">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Tactile Head" id="3" localization="8" tooltip="Detect touch on head tactile sensor." x="169" y="105">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Temperature Stuuufs" id="7" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="770" y="475">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Temperature" id="5" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="323" y="122">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="RAnkleRoll motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (1)" id="1" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="431" y="352">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="RHipRoll motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (2)" id="2" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="437" y="240">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="RHipPitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (3)" id="3" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="307" y="504">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="RKneePitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (4)" id="4" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="324" y="15">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="RAnklePitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="483" y="11">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ankles")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[Ankles]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Comment (1)" id="7" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="615" y="240">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hips")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[Hips]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Comment (2)" id="8" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="462" y="518">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("knee")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[knee]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Python Script" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="105" y="32">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.fatal("*********************************************************************")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Temperature Stuuufs (1)" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="969" y="446">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="84.0896">
                                            <Box name="Get Temperature" id="5" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="323" y="122">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="LAnkleRoll motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (1)" id="1" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="431" y="352">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="LHipRoll motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (2)" id="2" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="437" y="240">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="LHipPitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (3)" id="3" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="307" y="504">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="LKneePitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Get Temperature (4)" id="4" localization="8" tooltip="Get the temperature of the hardware selected in parameters.&#x0A;&#x0A;V1.1.0" x="330" y="3">
                                                <bitmap>media/images/box/sensors/getTemperature.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_onGet(self):
        sFullName = self.getParameter("Hardware name")
        sName = sFullName
        #if( "motor" in sName or "Battery" in sName ):
        #    sName = sName.split(" motor")[0]
        #elif( "processor" in sName ):
        #    sName = sName.split(" processor")[0]
        #else:
        #    self.logger.error("No temperature found for this hardware: " + str(sFullName))
        sList = sName.split(" ")
        sName = sList[0]
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        sKeyName = sTemplate % sName
        try:
            nTemperature = int( self.memory.getData(sKeyName) )
            self.logger.fatal(sFullName + " " + str(nTemperature) )
            self.onData( nTemperature )
        except:
           self.logger.error("No temperature found for this hardware: " + str(sFullName))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input the temperature asked is sent on the&#x0A;output." id="2" />
                                                <Output name="onData" type="2" type_size="1" nature="2" inner="0" tooltip="Temperature (°C) of the hardware selected in parameters." id="3" />
                                                <Parameter name="Hardware name" inherits_from_parent="0" content_type="3" value="LAnklePitch motor" default_value="Head processor" custom_choice="0" tooltip="Name of the hardware (battery, processor, motor) you want the temperature of." id="4">
                                                    <Choice value="Battery" />
                                                    <Choice value="Head processor" />
                                                    <Choice value="HeadPitch motor" />
                                                    <Choice value="HeadYaw motor" />
                                                    <Choice value="LAnklePitch motor" />
                                                    <Choice value="LAnkleRoll motor" />
                                                    <Choice value="LElbowRoll motor" />
                                                    <Choice value="LElbowYaw motor" />
                                                    <Choice value="LHand motor" />
                                                    <Choice value="LHipPitch motor" />
                                                    <Choice value="LHipRoll motor" />
                                                    <Choice value="LHipYawPitch motor" />
                                                    <Choice value="LKneePitch motor" />
                                                    <Choice value="LShoulderPitch motor" />
                                                    <Choice value="LShoulderRoll motor" />
                                                    <Choice value="LWristYaw motor" />
                                                    <Choice value="RAnklePitch motor" />
                                                    <Choice value="RAnkleRoll motor" />
                                                    <Choice value="RElbowRoll motor" />
                                                    <Choice value="RElbowYaw motor" />
                                                    <Choice value="RHand motor" />
                                                    <Choice value="RHipPitch motor" />
                                                    <Choice value="RHipRoll motor" />
                                                    <Choice value="RKneePitch motor" />
                                                    <Choice value="RShoulderPitch motor" />
                                                    <Choice value="RShoulderRoll motor" />
                                                    <Choice value="RWristYaw motor" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="483" y="11">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ankles")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[Ankles]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Comment (1)" id="7" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="615" y="240">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hips")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[Hips]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Comment (2)" id="8" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="462" y="518">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("knee")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[knee]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            </Box>
                                            <Box name="Python Script" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="105" y="32">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.fatal("*********************************************************************")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="7" />
                        <Link inputowner="3" indexofinput="3" outputowner="3" indexofoutput="9" />
                        <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="9" />
                        <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="9" />
                        <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="9" />
                        <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="8" />
                        <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="10" />
                        <Link inputowner="1" indexofinput="2" outputowner="1" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="3" outputowner="2" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
